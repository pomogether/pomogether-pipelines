name: Terraform Workflow

on:
  workflow_call:
    inputs:
      workdir:
        required: true
        type: string
      workspace:
        required: true
        type: string
      aws-region:
        required: true
        type: string
    secrets:
      ROLE_ARN:
        required: true
      GH_TOKEN:
        required: true
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      

jobs:
  apply-terraform:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout to branch
        uses: actions/checkout@v4

      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ inputs.aws-region }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.7.5"
          terraform_wrapper: true

      - name: Terraform Init
        id: init
        run: terraform init
        working-directory: ${{ inputs.workdir }}

      - name: Terraform Workspace
        run: terraform workspace select -or-create ${{ inputs.workspace }}
        working-directory: ${{ inputs.workdir }}

      - name: Run Terraform Plan
        id: plan
        run: terraform plan -no-color
        working-directory: ${{ inputs.workdir }}

      - name: Update Pull Request
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GH_TOKEN }}
          script: |
            const output = `#### Terraform Initialization ðŸ¤–\`${{ steps.init.outcome }}\`
            #### Terraform Plan ðŸ“–\`${{ steps.plan.outcome }}\`
            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${{ steps.plan.outputs.stdout }}
            \`\`\`

            </details>

            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1
